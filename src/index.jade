doctype
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    style: :stylus
      nac-color = #111
      nac-border-style = thin solid nac-color

      // Smarter underlines code is from https://eager.io/blog/smarter-link-underlines/
      @import '../node_modules/nib'
      selectionColor = #b4d5fe
      textShadowToCropUnderline(color)
        text-shadow .03em 0 color, -.03em 0 color, 0 .03em color, 0 -.03em color, .06em 0 color, -.06em 0 color, .09em 0 color, -.09em 0 color, .12em 0 color, -.12em 0 color, .15em 0 color, -.15em 0 color
      linkUnderlines(backgroundColor, color)
        color color
        text-decoration none
        textShadowToCropUnderline backgroundColor
        background-image linear-gradient(backgroundColor, backgroundColor), linear-gradient(backgroundColor, backgroundColor), linear-gradient(color, color)
        background-size .05em 1px, .05em 1px, 1px 1px
        background-repeat no-repeat, no-repeat, repeat-x
        background-position 0% 90%, 100% 90%, 0% 90%
        &::selection
          textShadowToCropUnderline selectionColor
          background selectionColor
        &::-moz-selection
          textShadowToCropUnderline selectionColor
          background selectionColor
        &:before, &:after, *, *:before, *:after
          text-shadow none
        &:visited
          color color

      @viewport
        width device-width
        zoom 1
      html, body
        font 100 1.2em/1.15 Helvetica Neue, DejaVu Sans ExtraLight, sans-serif
      h1
        font-weight lighter
        display inline-block
        linkUnderlines(white, nac-color)
      table
        border-spacing 0
        color nac-color
      td
        padding .5em
        overflow hidden
        text-align center
        line-height 1
        vertical-align middle
        cursor pointer
      #nac td
        border-right nac-border-style
        border-bottom nac-border-style
        width 1em
        max-width 1em
        height 1em
        max-height 1em
      #nac td:last-child
        border-right none
      #nac tr:last-child td
        border-bottom none

    script: :babel
      document.addEventListener('DOMContentLoaded', () => {

        var gameFinished = false;
        var playersTurn = 'X';
        var game = new Array(3);
        for (var i = 0; i < 3; i++) {
          game[i] = ['', '', '']
        }

        var tdList = document.getElementById('nac')
          .querySelectorAll('td');

        function highlightWin(el1, el2, el3) {
          console.log(playersTurn + ' has won');
          el1.style.background = 'red';
          el2.style.background = 'red';
          el3.style.background = 'red';
        }

        function checkWon() {
          // horizontals
          for (var y = 0; y < 3; y++) {
            if (game[y][0] !== '' && (game[y][0] === game[y][1]) && (game[y][1] === game[y][2])) {
              highlightWin(
                tdList[y*3],
                tdList[y*3 + 1],
                tdList[y*3 + 2]);
              return true;
            }
          }

          // verticals
          for (var x = 0; x < 3; x++) {
            if (game[0][x] !== '' && (game[0][x] === game[1][x]) && (game[1][x] === game[2][x])) {
              highlightWin(
                tdList[x],
                tdList[1*3 + x],
                tdList[2*3 + x]);
              return true;
            }
          }

          // diagonals
          if (game[0][0] !== '' && (game[0][0] === game[1][1]) && (game[1][1] === game[2][2])) {
            highlightWin(
              tdList[0], tdList[4], tdList[8]);
            return true;
          }
          if (game[0][2] !== '' && (game[0][2] === game[1][1]) && (game[1][1] === game[2][0])) {
            highlightWin(
            tdList[2], tdList[4], tdList[6]);
            return true;
          }

          return false;
        }

        function createOnClick(y, x) {
          tdList[y*3 + x].addEventListener('click', (event) => {
            //console.log('tdList[' + (y*3 + x).toString() + ']: y = ' + y.toString() + ', x = ' + x.toString());

            if (!gameFinished && game[y][x] === '') {
              game[y][x] = playersTurn;
              event.target.innerHTML = playersTurn;

              if (checkWon()) {
                gameFinished = true;
              }

              if (playersTurn === 'X') {
                playersTurn = 'O';
              } else {
                playersTurn = 'X';
              }
            }
          });
        }

        for (var y = 0; y < 3; y++) {
          for (var x = 0; x < 3; x++) {
            createOnClick(y, x);
          }
        }
      });
  body
    h1 Noughts and crosses
    table#nac
      tr
        td
        td
        td
      tr
        td
        td
        td
      tr
        td
        td
        td